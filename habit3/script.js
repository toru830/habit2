// ÁøíÊÖ£„Éá„Éº„Çø„ÅÆÂÆöÁæ©
const habitsData = [
    { id: 'early_bed', name: 'Êó©ÂØùÊó©Ëµ∑„Åç', shortName: 'Êó©ÂØùÊó©Ëµ∑', category: 'Áù°Áú†„ÉªÁîüÊ¥ª„É™„Ç∫„É†', priority: 5, reason: 'ÂÖ®ÁøíÊÖ£„ÅÆÂúüÂè∞„ÄÇÂøÉË∫´„ÉªÈõÜ‰∏≠„Éª‰ª£Ë¨ù„Å´Áõ¥Áµê„ÄÇ', type: 'habit' },
    { id: 'journal', name: '„Ç∏„É£„Éº„Éä„É´', shortName: 'ÔΩºÔæûÔΩ¨ÔΩ∞ÔæÖÔæô', category: 'Á≤æÁ•û„ÉªËá™Â∑±Ë™çË≠ò', priority: 4, reason: 'ÁøíÊÖ£Âåñ„ÇÑËá™Â∑±Êï¥ÁêÜ„Å´ÂΩπÁ´ã„Å§„ÄÇÊñπÂêëÊÄß„ÇíË¶ãÂ§±„Çè„Å™„ÅÑ„Åü„ÇÅ„Å´ÈáçË¶Å„ÄÇ', type: 'habit' },
    { id: 'study', name: 'ÂãâÂº∑', shortName: 'ÂãâÂº∑', category: 'Áü•ÁöÑÊàêÈï∑„Éª„Ç≠„É£„É™„Ç¢', priority: 5, reason: 'Â§ñÈÉ®ÊàêÊûúÔºàË≥áÊ†ºÔºâ„Å®ÂÜÖÁöÑÊàêÈï∑„ÅÆ‰∏°Êñπ„Å´Áõ¥Áµê„ÄÇ‰∫∫Áîü„ÅÆËª∏„ÄÇ', type: 'habit' },
    { id: 'exercise', name: 'Á≠ã„Éà„É¨', shortName: 'Á≠ã„Éà„É¨', category: 'ÂÅ•Â∫∑„Éª‰ΩìÂäõ', priority: 5, reason: 'Èï∑ÊúüÁöÑ„Å™‰ΩìÂäõ„Éª„É°„É≥„Çø„É´„ÅÆÂü∫Áõ§„ÄÇÂ∞ÜÊù•„Å∏„ÅÆÊäïË≥á„ÄÇ', type: 'habit' },
    { id: 'reading', name: 'Ë™≠Êõ∏', shortName: 'Ë™≠Êõ∏', category: 'Áü•ÁöÑÊàêÈï∑', priority: 4, reason: 'ÊÄùËÄÉ„ÅÆÊ∑±„Åï„ÉªÂπÖ„Å´ÂØÑ‰∏é„ÄÇ„Åü„Å†„Åó„ÄåÂãâÂº∑„ÄçÂÑ™ÂÖà„ÄÇ', type: 'habit' },
    { id: 'todo_list', name: 'To DO List', shortName: 'To DO List', category: 'ÁîüÁî£ÊÄß„ÉªÁÆ°ÁêÜ', priority: 4, reason: '„Çø„Çπ„ÇØÁÆ°ÁêÜ„Å®ÂÑ™ÂÖàÈ†Ü‰Ωç‰ªò„Åë„ÄÇÂäπÁéáÁöÑ„Å™ÊôÇÈñìÊ¥ªÁî®„ÄÇ', type: 'habit' },
    { id: 'no_phone_bed', name: 'NoÂØù„ÇãÂâç„Çπ„Éû„Éõ', shortName: 'NoÂØùÔΩΩÔæèÔæé', category: 'Áù°Áú†„ÅÆË≥™', priority: 5, reason: 'Áù°Áú†„ÅÆË≥™„ÇíÂÆà„ÇãÊúÄÈáçË¶ÅÂõ†Â≠ê„ÄÇÊó©ÂØùÊó©Ëµ∑„Åç„Å®‰∏Ä‰Ωì„ÄÇ', type: 'no' },
    { id: 'no_alcohol', name: 'NoÈÖí', shortName: 'NoÈÖí', category: 'ÂÅ•Â∫∑', priority: 5, reason: 'Áù°Áú†„ÉªËÇùËáì„ÉªÈõÜ‰∏≠Âäõ„Å´Â∫ÉÁØÑ„Å™ÂΩ±Èüø„ÄÇÈï∑ÊúüÁöÑ„É™„Çπ„ÇØ„ÅåÂ§ß„Åç„ÅÑ„ÄÇ', type: 'no' },
    { id: 'no_overeating', name: 'NoÊö¥È£ü', shortName: 'NoÊö¥È£ü', category: 'ÂÅ•Â∫∑', priority: 4, reason: 'ÂÅ•Â∫∑„Å®‰ΩìÈáçÁÆ°ÁêÜ„Å´ÂΩ±Èüø„ÄÇ', type: 'no' },
    { id: 'protein', name: '„Éó„É≠„ÉÜ„Ç§„É≥', shortName: 'ÔæåÔæüÔæõÔæÉÔΩ≤Ôæù', category: 'Ê†ÑÈ§ä', priority: 4, reason: 'Á≠ã„Éà„É¨ÂäπÊûú„ÇíÈ´ò„ÇÅ„Çã„ÄÇÈÅãÂãï„Å®„Çª„ÉÉ„Éà„ÅßÂäπÂäõÂ§ß„ÄÇ', type: 'supplement' },
    { id: 'probiotics', name: 'Êï¥ËÖ∏Ââ§', shortName: 'Êï¥ËÖ∏Ââ§', category: 'Ê†ÑÈ§ä„ÉªÊ∂àÂåñ', priority: 2, reason: 'ËÖ∏ÂÜÖÁí∞Â¢ÉÊîπÂñÑ„ÅÆË£úÂä©„ÄÇÂü∫Êú¨„ÅØÈ£ü‰∫ã„ÅßÂçÅÂàÜ„ÄÇ', type: 'supplement' },
    { id: 'vitamin_b', name: '„Éì„Çø„Éü„É≥D', shortName: 'ÔæãÔæûÔæÄÔæêÔæùD', category: 'Ê†ÑÈ§ä', priority: 3, reason: '„Ç®„Éç„É´„ÇÆ„Éº‰ª£Ë¨ù„Å®Á•ûÁµåÊ©üËÉΩ„Å´ÈáçË¶Å„ÄÇ', type: 'supplement' }
];

// JSONBin.io APIË®≠ÂÆöÔºà„ÉÜ„Çπ„ÉàÁî®„ÅÆ„ÉÄ„Éü„Éº„Ç≠„ÉºÔºâ
const JSONBIN_API_URL = 'https://api.jsonbin.io/v3/b';
const JSONBIN_API_KEY = '$2a$10$dummy_key_for_testing'; // „ÉÜ„Çπ„ÉàÁî®

class HabitTracker {
    constructor() {
        this.completedHabits = {};
        this.currentWeek = this.getCurrentWeek();
        this.currentUser = null;
        this.isSyncing = false;
        
        this.init();
    }

    init() {
        console.log('üöÄ ÁøíÊÖ£„Éà„É©„ÉÉ„Ç´„Éº v3 ÂàùÊúüÂåñÈñãÂßã');
        this.setupAuth();
        this.setupEventListeners();
        this.renderCalendar();
        console.log('‚úÖ ÂàùÊúüÂåñÂÆå‰∫Ü');
    }

    // Ë™çË®º„Ç∑„Çπ„ÉÜ„É†
    setupAuth() {
        // ‰øùÂ≠ò„Åï„Çå„Åü„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíË™≠„ÅøËæº„Åø
        const savedUser = localStorage.getItem('habit3_current_user');
        if (savedUser) {
            this.currentUser = JSON.parse(savedUser);
            this.updateAuthUI();
            // „É≠„Ç∞„Ç§„É≥Ê∏à„Åø„ÅÆÂ†¥Âêà„ÅØËá™Âãï„Åß„ÇØ„É©„Ç¶„Éâ„Åã„Çâ„Éá„Éº„Çø„ÇíÂêåÊúü
            this.syncFromCloud();
        }
    }

    // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÅÆË®≠ÂÆö
    setupEventListeners() {
        // DOMË¶ÅÁ¥†„ÅÆÂ≠òÂú®Á¢∫Ë™ç
        const elements = {
            prevWeek: document.getElementById('prevWeek'),
            nextWeek: document.getElementById('nextWeek'),
            goToToday: document.getElementById('goToToday'),
            authBtn: document.getElementById('authBtn'),
            logoutBtn: document.getElementById('logoutBtn'),
            syncBtn: document.getElementById('syncBtn'),
            authModalClose: document.getElementById('authModalClose'),
            syncModalClose: document.getElementById('syncModalClose'),
            authModalCancel: document.getElementById('authModalCancel'),
            authModalCancel2: document.getElementById('authModalCancel2'),
            syncModalCancel: document.getElementById('syncModalCancel'),
            loginTab: document.getElementById('loginTab'),
            signupTab: document.getElementById('signupTab'),
            loginSubmit: document.getElementById('loginSubmit'),
            signupSubmit: document.getElementById('signupSubmit'),
            manualSync: document.getElementById('manualSync')
        };

        // ÈÄ±ÁßªÂãï
        if (elements.prevWeek) elements.prevWeek.addEventListener('click', () => this.changeWeek(-1));
        if (elements.nextWeek) elements.nextWeek.addEventListener('click', () => this.changeWeek(1));
        if (elements.goToToday) elements.goToToday.addEventListener('click', () => this.goToToday());

        // Ë™çË®º„Éú„Çø„É≥
        if (elements.authBtn) elements.authBtn.addEventListener('click', () => this.showAuthModal());
        if (elements.logoutBtn) elements.logoutBtn.addEventListener('click', () => this.logout());
        if (elements.syncBtn) elements.syncBtn.addEventListener('click', () => this.showSyncModal());

        // „É¢„Éº„ÉÄ„É´
        if (elements.authModalClose) elements.authModalClose.addEventListener('click', () => this.hideAuthModal());
        if (elements.syncModalClose) elements.syncModalClose.addEventListener('click', () => this.hideSyncModal());
        if (elements.authModalCancel) elements.authModalCancel.addEventListener('click', () => this.hideAuthModal());
        if (elements.authModalCancel2) elements.authModalCancel2.addEventListener('click', () => this.hideAuthModal());
        if (elements.syncModalCancel) elements.syncModalCancel.addEventListener('click', () => this.hideSyncModal());

        // Ë™çË®º„Éï„Ç©„Éº„É†
        if (elements.loginTab) elements.loginTab.addEventListener('click', () => this.showLoginForm());
        if (elements.signupTab) elements.signupTab.addEventListener('click', () => this.showSignupForm());
        if (elements.loginSubmit) elements.loginSubmit.addEventListener('click', () => this.handleLogin());
        if (elements.signupSubmit) elements.signupSubmit.addEventListener('click', () => this.handleSignup());

        // ÂêåÊúü
        if (elements.manualSync) elements.manualSync.addEventListener('click', () => this.manualSync());
    }

    // Ë™çË®º„É¢„Éº„ÉÄ„É´Ë°®Á§∫
    showAuthModal() {
        const modal = document.getElementById('authModal');
        if (modal) modal.style.display = 'block';
        this.showLoginForm();
    }

    // Ë™çË®º„É¢„Éº„ÉÄ„É´ÈùûË°®Á§∫
    hideAuthModal() {
        const modal = document.getElementById('authModal');
        if (modal) modal.style.display = 'none';
        this.clearAuthForms();
    }

    // ÂêåÊúü„É¢„Éº„ÉÄ„É´Ë°®Á§∫
    showSyncModal() {
        const modal = document.getElementById('syncModal');
        if (modal) modal.style.display = 'block';
    }

    // ÂêåÊúü„É¢„Éº„ÉÄ„É´ÈùûË°®Á§∫
    hideSyncModal() {
        const modal = document.getElementById('syncModal');
        if (modal) modal.style.display = 'none';
    }

    // „É≠„Ç∞„Ç§„É≥„Éï„Ç©„Éº„É†Ë°®Á§∫
    showLoginForm() {
        const loginForm = document.getElementById('loginForm');
        const signupForm = document.getElementById('signupForm');
        const loginTab = document.getElementById('loginTab');
        const signupTab = document.getElementById('signupTab');
        
        if (loginForm) loginForm.style.display = 'block';
        if (signupForm) signupForm.style.display = 'none';
        if (loginTab) {
            loginTab.style.backgroundColor = '#4A90E2';
            loginTab.style.color = 'white';
        }
        if (signupTab) {
            signupTab.style.backgroundColor = '#555';
            signupTab.style.color = '#ccc';
        }
    }

    // Êñ∞Ë¶èÁôªÈå≤„Éï„Ç©„Éº„É†Ë°®Á§∫
    showSignupForm() {
        const loginForm = document.getElementById('loginForm');
        const signupForm = document.getElementById('signupForm');
        const loginTab = document.getElementById('loginTab');
        const signupTab = document.getElementById('signupTab');
        
        if (loginForm) loginForm.style.display = 'none';
        if (signupForm) signupForm.style.display = 'block';
        if (signupTab) {
            signupTab.style.backgroundColor = '#4A90E2';
            signupTab.style.color = 'white';
        }
        if (loginTab) {
            loginTab.style.backgroundColor = '#555';
            loginTab.style.color = '#ccc';
        }
    }

    // „Éï„Ç©„Éº„É†„ÇØ„É™„Ç¢
    clearAuthForms() {
        const loginEmail = document.getElementById('loginEmail');
        const loginPassword = document.getElementById('loginPassword');
        const signupEmail = document.getElementById('signupEmail');
        const signupPassword = document.getElementById('signupPassword');
        const signupPasswordConfirm = document.getElementById('signupPasswordConfirm');
        
        if (loginEmail) loginEmail.value = '';
        if (loginPassword) loginPassword.value = '';
        if (signupEmail) signupEmail.value = '';
        if (signupPassword) signupPassword.value = '';
        if (signupPasswordConfirm) signupPasswordConfirm.value = '';
        this.hideAuthMessage();
    }

    // „É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ
    async handleLogin() {
        const emailEl = document.getElementById('loginEmail');
        const passwordEl = document.getElementById('loginPassword');
        
        if (!emailEl || !passwordEl) {
            console.error('„É≠„Ç∞„Ç§„É≥„Éï„Ç©„Éº„É†„ÅÆË¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        const email = emailEl.value;
        const password = passwordEl.value;

        if (!email || !password) {
            this.showAuthMessage('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å®„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', true);
            return;
        }

        try {
            const users = JSON.parse(localStorage.getItem('habit3_users') || '{}');
            const user = users[email];

            if (user && user.password === password) {
                this.currentUser = { email: email, id: user.id };
                localStorage.setItem('habit3_current_user', JSON.stringify(this.currentUser));
                this.updateAuthUI();
                this.hideAuthModal();
                this.showAuthMessage('„É≠„Ç∞„Ç§„É≥„Åó„Åæ„Åó„ÅüÔºÅ', false);
                
                // „É≠„Ç∞„Ç§„É≥Âæå„ÄÅËá™Âãï„Åß„ÇØ„É©„Ç¶„Éâ„Åã„Çâ„Éá„Éº„Çø„ÇíÂêåÊúü
                await this.syncFromCloud();
                return;
            } else {
                this.showAuthMessage('„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åæ„Åü„ÅØ„Éë„Çπ„ÉØ„Éº„Éâ„ÅåÈñìÈÅï„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ', true);
            }
        } catch (error) {
            console.error('„É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº:', error);
            this.showAuthMessage('„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', true);
        }
    }

    // Êñ∞Ë¶èÁôªÈå≤Âá¶ÁêÜ
    async handleSignup() {
        const emailEl = document.getElementById('signupEmail');
        const passwordEl = document.getElementById('signupPassword');
        const passwordConfirmEl = document.getElementById('signupPasswordConfirm');
        
        if (!emailEl || !passwordEl || !passwordConfirmEl) {
            console.error('Êñ∞Ë¶èÁôªÈå≤„Éï„Ç©„Éº„É†„ÅÆË¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
            return;
        }
        
        const email = emailEl.value;
        const password = passwordEl.value;
        const passwordConfirm = passwordConfirmEl.value;

        if (!email || !password || !passwordConfirm) {
            this.showAuthMessage('„Åô„Åπ„Å¶„ÅÆÈ†ÖÁõÆ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', true);
            return;
        }

        if (password.length < 6) {
            this.showAuthMessage('„Éë„Çπ„ÉØ„Éº„Éâ„ÅØ6ÊñáÂ≠ó‰ª•‰∏ä„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', true);
            return;
        }

        if (password !== passwordConfirm) {
            this.showAuthMessage('„Éë„Çπ„ÉØ„Éº„Éâ„Åå‰∏ÄËá¥„Åó„Åæ„Åõ„Çì„ÄÇ', true);
            return;
        }

        try {
            const users = JSON.parse(localStorage.getItem('habit3_users') || '{}');
            
            if (users[email]) {
                this.showAuthMessage('„Åì„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅØÊó¢„Å´ÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ', true);
                return;
            }

            const userId = 'user_' + Date.now();
            users[email] = {
                id: userId,
                password: password,
                createdAt: new Date().toISOString()
            };

            localStorage.setItem('habit3_users', JSON.stringify(users));

            this.currentUser = { email: email, id: userId };
            localStorage.setItem('habit3_current_user', JSON.stringify(this.currentUser));
            this.updateAuthUI();
            this.hideAuthModal();
            this.showAuthMessage('„Ç¢„Ç´„Ç¶„É≥„Éà„Çí‰ΩúÊàê„Åó„Åæ„Åó„ÅüÔºÅ', false);

            // Êñ∞Ë¶èÁôªÈå≤Âæå„ÄÅ„ÇØ„É©„Ç¶„Éâ„Å´ÂàùÊúü„Éá„Éº„Çø„Çí‰øùÂ≠ò
            await this.syncToCloud();
        } catch (error) {
            console.error('Êñ∞Ë¶èÁôªÈå≤„Ç®„É©„Éº:', error);
            this.showAuthMessage('Êñ∞Ë¶èÁôªÈå≤„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', true);
        }
    }

    // „É≠„Ç∞„Ç¢„Ç¶„ÉàÂá¶ÁêÜ
    logout() {
        if (confirm('„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åô„ÅãÔºü')) {
            this.currentUser = null;
            localStorage.removeItem('habit3_current_user');
            this.updateAuthUI();
            this.showAuthMessage('„É≠„Ç∞„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇ', false);
        }
    }

    // Ë™çË®ºUIÊõ¥Êñ∞
    updateAuthUI() {
        const authBtn = document.getElementById('authBtn');
        const logoutBtn = document.getElementById('logoutBtn');
        const syncBtn = document.getElementById('syncBtn');
        
        if (this.currentUser) {
            authBtn.style.display = 'none';
            logoutBtn.style.display = 'flex';
            logoutBtn.title = `„É≠„Ç∞„Ç¢„Ç¶„Éà (${this.currentUser.email})`;
            syncBtn.style.display = 'flex';
            syncBtn.title = 'ÂêåÊúüÁä∂Ê≥Å';
        } else {
            authBtn.style.display = 'flex';
            logoutBtn.style.display = 'none';
            syncBtn.style.display = 'none';
        }
    }

    // „É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
    showAuthMessage(message, isError) {
        const messageEl = document.getElementById('authMessage');
        if (messageEl) {
            messageEl.textContent = message;
            messageEl.style.display = 'block';
            messageEl.style.backgroundColor = isError ? '#ff6b6b' : '#28a745';
            messageEl.style.color = 'white';
            
            setTimeout(() => {
                this.hideAuthMessage();
            }, 3000);
        }
    }

    // „É°„ÉÉ„Çª„Éº„Ç∏ÈùûË°®Á§∫
    hideAuthMessage() {
        const messageEl = document.getElementById('authMessage');
        if (messageEl) messageEl.style.display = 'none';
    }

    // JSONBin.io APIÈÄ£Êê∫Ôºà„ÉÜ„Çπ„ÉàÁî®Ôºâ
    async syncToCloud() {
        if (!this.currentUser) return;

        try {
            this.isSyncing = true;
            const userData = {
                completedHabits: this.completedHabits,
                userId: this.currentUser.id,
                email: this.currentUser.email,
                lastSync: new Date().toISOString()
            };

            // „ÉÜ„Çπ„ÉàÁî®Ôºö„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò
            localStorage.setItem(`habit3_cloud_${this.currentUser.id}`, JSON.stringify(userData));
            console.log('‚úÖ „É≠„Éº„Ç´„É´„Å´„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åó„Åæ„Åó„ÅüÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ');
        } catch (error) {
            console.error('‚ùå ÂêåÊúü„Ç®„É©„Éº:', error);
        } finally {
            this.isSyncing = false;
        }
    }

    async syncFromCloud() {
        if (!this.currentUser) return;

        try {
            this.isSyncing = true;
            
            // „ÉÜ„Çπ„ÉàÁî®Ôºö„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„ÇâÂèñÂæó
            const savedData = localStorage.getItem(`habit3_cloud_${this.currentUser.id}`);
            if (savedData) {
                const userData = JSON.parse(savedData);
                if (userData && userData.completedHabits) {
                    this.completedHabits = userData.completedHabits;
                    this.saveCompletedHabits();
                    this.renderCalendar();
                    console.log('‚úÖ „É≠„Éº„Ç´„É´„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó„Åó„Åæ„Åó„ÅüÔºà„ÉÜ„Çπ„ÉàÁî®Ôºâ');
                }
            } else {
                console.log('‚ÑπÔ∏è „Éá„Éº„Çø„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„ÇìÔºàÂàùÂõû„É≠„Ç∞„Ç§„É≥Ôºâ');
            }
        } catch (error) {
            console.error('‚ùå ÂêåÊúü„Ç®„É©„Éº:', error);
        } finally {
            this.isSyncing = false;
        }
    }

    // ÊâãÂãïÂêåÊúü
    async manualSync() {
        if (!this.currentUser) {
            this.showSyncMessage('„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ', true);
            return;
        }

        try {
            this.showSyncMessage('ÂêåÊúü‰∏≠...', false);
            await this.syncToCloud();
            await this.syncFromCloud();
            this.showSyncMessage('ÂêåÊúü„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ', false);
        } catch (error) {
            this.showSyncMessage('ÂêåÊúü„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ', true);
        }
    }

    // ÂêåÊúü„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
    showSyncMessage(message, isError) {
        const messageEl = document.getElementById('syncMessage');
        messageEl.textContent = message;
        messageEl.style.display = 'block';
        messageEl.style.backgroundColor = isError ? '#ff6b6b' : '#28a745';
        messageEl.style.color = 'white';
        
        setTimeout(() => {
            messageEl.style.display = 'none';
        }, 3000);
    }

    // ÁèæÂú®„ÅÆÈÄ±„ÇíÂèñÂæó
    getCurrentWeek() {
        const today = new Date();
        const dayOfWeek = today.getDay();
        const monday = new Date(today);
        monday.setDate(today.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));
        return monday;
    }

    // ÈÄ±ÁßªÂãï
    changeWeek(direction) {
        this.currentWeek.setDate(this.currentWeek.getDate() + (direction * 7));
        this.renderCalendar();
    }

    // ‰ªäÊó•„Å´Êàª„Çã
    goToToday() {
        this.currentWeek = this.getCurrentWeek();
        this.renderCalendar();
    }

    // „Ç´„É¨„É≥„ÉÄ„ÉºÊèèÁîª
    renderCalendar() {
        this.loadCompletedHabits();
        this.renderDateRow();
        this.renderHabitsGrid();
        this.renderDailyTotalRow();
        this.updateMonthDisplay();
    }

    // Êó•‰ªòË°åÊèèÁîª
    renderDateRow() {
        const dateRow = document.getElementById('dateRow');
        const dates = this.getWeekDates();
        
        dateRow.innerHTML = `
            <div class="date-cell empty-cell"></div>
            <div class="date-cell empty-cell"></div>
            ${dates.map(date => `
                <div class="date-cell">${date.getDate()}</div>
            `).join('')}
            <div class="date-cell empty-cell"></div>
            <div class="date-cell empty-cell"></div>
        `;
    }

    // ÁøíÊÖ£„Ç∞„É™„ÉÉ„ÉâÊèèÁîª
    renderHabitsGrid() {
        const habitsGrid = document.getElementById('habitsGrid');
        const dates = this.getWeekDates();
        
        habitsGrid.innerHTML = habitsData.map((habit, index) => `
            <div class="habit-row">
                <div class="habit-cell habit-number">${index + 1}</div>
                <div class="habit-cell habit-name">${habit.shortName}</div>
                ${dates.map(date => {
                    const dateKey = this.formatDate(date);
                    const isChecked = this.completedHabits[habit.id] && this.completedHabits[habit.id][dateKey];
                    return `
                        <div class="habit-cell">
                            <div class="habit-checkbox ${isChecked ? 'checked' : ''}" 
                                 data-habit="${habit.id}" 
                                 data-date="${dateKey}">
                            </div>
                        </div>
                    `;
                }).join('')}
                <div class="habit-cell habit-count">${this.getWeeklyCount(habit.id)}</div>
                <div class="habit-cell habit-count">${this.getTotalCount(habit.id)}</div>
            </div>
        `).join('');

        // „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíËøΩÂä†
        document.querySelectorAll('.habit-checkbox').forEach(checkbox => {
            checkbox.addEventListener('click', (e) => this.toggleHabit(e));
        });
    }

    // Êó•Ë®àË°åÊèèÁîª
    renderDailyTotalRow() {
        const dailyTotalRow = document.getElementById('dailyTotalRow');
        const dates = this.getWeekDates();
        
        dailyTotalRow.innerHTML = `
            <div class="daily-total-cell total-label">Êó•Ë®à</div>
            <div class="daily-total-cell total-label"></div>
            ${dates.map(date => {
                const dateKey = this.formatDate(date);
                const dailyCount = this.getDailyCount(dateKey);
                return `<div class="daily-total-cell total-value">${dailyCount}</div>`;
            }).join('')}
            <div class="daily-total-cell total-value">${this.getWeeklyTotal()}</div>
            <div class="daily-total-cell total-value">${this.getGrandTotal()}</div>
        `;
    }

    // ÊúàË°®Á§∫Êõ¥Êñ∞
    updateMonthDisplay() {
        const monthNames = ['1Êúà', '2Êúà', '3Êúà', '4Êúà', '5Êúà', '6Êúà', '7Êúà', '8Êúà', '9Êúà', '10Êúà', '11Êúà', '12Êúà'];
        const month = monthNames[this.currentWeek.getMonth()];
        const year = this.currentWeek.getFullYear();
        document.getElementById('currentMonth').textContent = `${year}Âπ¥${month}`;
    }

    // ÈÄ±„ÅÆÊó•‰ªò„ÇíÂèñÂæó
    getWeekDates() {
        const dates = [];
        for (let i = 0; i < 7; i++) {
            const date = new Date(this.currentWeek);
            date.setDate(this.currentWeek.getDate() + i);
            dates.push(date);
        }
        return dates;
    }

    // Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    formatDate(date) {
        return date.toISOString().split('T')[0];
    }

    // ÁøíÊÖ£„ÅÆÂàá„ÇäÊõø„Åà
    async toggleHabit(event) {
        if (!this.currentUser) {
            this.showAuthMessage('„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ', true);
            return;
        }

        const checkbox = event.target;
        const habitId = checkbox.dataset.habit;
        const dateKey = checkbox.dataset.date;

        if (!this.completedHabits[habitId]) {
            this.completedHabits[habitId] = {};
        }

        if (checkbox.classList.contains('checked')) {
            delete this.completedHabits[habitId][dateKey];
            checkbox.classList.remove('checked');
        } else {
            this.completedHabits[habitId][dateKey] = true;
            checkbox.classList.add('checked');
        }

        this.saveCompletedHabits();
        this.renderCalendar();

        // „Éá„Éº„ÇøÂ§âÊõ¥Âæå„ÄÅËá™Âãï„Åß„ÇØ„É©„Ç¶„Éâ„Å´‰øùÂ≠ò
        await this.syncToCloud();
    }

    // ÈÄ±Èñì„Ç´„Ç¶„É≥„ÉàÂèñÂæó
    getWeeklyCount(habitId) {
        const dates = this.getWeekDates();
        return dates.reduce((count, date) => {
            const dateKey = this.formatDate(date);
            return count + (this.completedHabits[habitId] && this.completedHabits[habitId][dateKey] ? 1 : 0);
        }, 0);
    }

    // Á∑è„Ç´„Ç¶„É≥„ÉàÂèñÂæó
    getTotalCount(habitId) {
        return this.completedHabits[habitId] ? Object.keys(this.completedHabits[habitId]).length : 0;
    }

    // Êó•Âà•„Ç´„Ç¶„É≥„ÉàÂèñÂæó
    getDailyCount(dateKey) {
        return habitsData.reduce((count, habit) => {
            return count + (this.completedHabits[habit.id] && this.completedHabits[habit.id][dateKey] ? 1 : 0);
        }, 0);
    }

    // ÈÄ±ÈñìÂêàË®àÂèñÂæó
    getWeeklyTotal() {
        const dates = this.getWeekDates();
        return dates.reduce((total, date) => {
            return total + this.getDailyCount(this.formatDate(date));
        }, 0);
    }

    // Á∑èÂêàË®àÂèñÂæó
    getGrandTotal() {
        return habitsData.reduce((total, habit) => {
            return total + this.getTotalCount(habit.id);
        }, 0);
    }

    // „Éá„Éº„Çø‰øùÂ≠ò
    saveCompletedHabits() {
        localStorage.setItem('habit3_completed_habits', JSON.stringify(this.completedHabits));
    }

    // „Éá„Éº„ÇøË™≠„ÅøËæº„Åø
    loadCompletedHabits() {
        const saved = localStorage.getItem('habit3_completed_habits');
        this.completedHabits = saved ? JSON.parse(saved) : {};
    }
}

// „Ç¢„Éó„É™ÂàùÊúüÂåñ
document.addEventListener('DOMContentLoaded', () => {
    window.habitTracker = new HabitTracker();
});
